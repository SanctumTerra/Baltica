name: Publish and Release

on:
  push:
    branches: 
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install
      - name: Run lint
        run: npm run lint

  build:
    needs: [lint]    
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist/
            package.json
            package-lock.json

  publish-and-release:
    needs: [build]
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Check if package can be published
        run: npm publish --dry-run --verbose
      - name: Publish package
        id: npm-publish
        run: npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Get version and Minecraft info
        if: success()
        id: package-info
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "minecraft=$(node -p "require('./package.json').minecraft")" >> $GITHUB_OUTPUT
      - name: Create Release
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ steps.package-info.outputs.version }} \
            --title "Release v${{ steps.package-info.outputs.version }} for Minecraft Bedrock ${{ steps.package-info.outputs.minecraft }}" \
            --notes "Release for Baltica v${{ steps.package-info.outputs.version }}
            Compatible with Minecraft Bedrock ${{ steps.package-info.outputs.minecraft }}" \
            --target ${{ github.sha }}