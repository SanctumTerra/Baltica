name: Publish and Release

on:
  push:
    branches: 
      - master

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install
      - name: Run lint
        run: npm run lint

  build:
    name: Build Package
    needs: [lint]    
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist/
            package.json
            package-lock.json

  create-release:
    name: Create GitHub Release
    needs: [build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-info.outputs.version }}
      minecraft: ${{ steps.package-info.outputs.minecraft }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Get version and Minecraft info
        id: package-info
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "minecraft=$(node -p "require('./package.json').minecraft")" >> $GITHUB_OUTPUT
      - name: Generate release notes
        id: release-notes
        run: |
          # Get the latest release tag (if any)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Set the range for git log
          if [ -z "$LATEST_TAG" ]; then
            # If no previous tag, get all commits
            COMMIT_RANGE=""
            echo "No previous release found, including all commits"
          else
            # Get commits since the last tag
            COMMIT_RANGE="${LATEST_TAG}..HEAD"
            echo "Getting commits since ${LATEST_TAG}"
          fi
          
          # Start building the release notes
          RELEASE_NOTES="Release for Baltica v${{ steps.package-info.outputs.version }}
          Compatible with Minecraft Bedrock ${{ steps.package-info.outputs.minecraft }}
          
          ## Commits"
          
          # Add commit list
          if [ -z "$COMMIT_RANGE" ]; then
            COMMITS=$(git log --pretty=format:"- \`%h\` - %s" --reverse)
          else
            COMMITS=$(git log ${COMMIT_RANGE} --pretty=format:"- \`%h\` - %s" --reverse)
          fi
          
          RELEASE_NOTES="$RELEASE_NOTES
          $COMMITS"
          
          # Set the release notes as output (escaped for GitHub Actions)
          {
            echo "notes<<EOF"
            echo "$RELEASE_NOTES"
            echo "EOF"
          } >> $GITHUB_OUTPUT
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ steps.package-info.outputs.version }} \
            --title "Release v${{ steps.package-info.outputs.version }} for Minecraft Bedrock ${{ steps.package-info.outputs.minecraft }}" \
            --notes "${{ steps.release-notes.outputs.notes }}" \
            --target ${{ github.sha }}

  npm-publish:
    name: Publish to NPM
    needs: [create-release]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Check if package can be published
        run: npm publish --dry-run --verbose
      - name: Publish package
        run: npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  discord-webhook:
    name: Send Discord Notification
    needs: [npm-publish, create-release]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Create release archive
        run: |
          tar -czf baltica-v${{ needs.create-release.outputs.version }}.tar.gz dist/ package.json
          zip -r baltica-v${{ needs.create-release.outputs.version }}.zip dist/ package.json
      - name: Send Discord notification
        run: |
          curl -H "Content-Type: multipart/form-data" \
            -F "payload_json={\"content\":\"**ðŸš€ Baltica v${{ needs.create-release.outputs.version }} Released for Minecraft ${{ needs.create-release.outputs.minecraft }}!**\n\nðŸ“¦ **Quick Install:**\n\`\`\`bash\nnpm install baltica\n# or version specific\nnpm install baltica@${{ needs.create-release.outputs.version }}\n\`\`\`\n\nðŸ”— **Links:**\nâ€¢ [GitHub Release](https://github.com/SanctumTerra/Baltica/releases/tag/v${{ needs.create-release.outputs.version }})\nâ€¢ [NPM Package](https://www.npmjs.com/package/baltica)\n\nâœ¨ Ready to build amazing Minecraft Bedrock experiences!\"}" \
            -F "file1=@baltica-v${{ needs.create-release.outputs.version }}.tar.gz" \
            -F "file2=@baltica-v${{ needs.create-release.outputs.version }}.zip" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}